/* Copyright 2020 tominabox1
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
#include QMK_KEYBOARD_H

enum layers {
  _0,
  _1,
  _2,
};

/*
#define LOWER MO(_LOWER)
#define RAISE MO(_RAISE)
*/

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {

/* 0
 * ,-----------------------------------------------------------------------------------------------------------------------------------------------.
 * |   ESC/~   |     Q     |     W     |     E     |     R     |     T     |     Y     |     U     |     I     |     O     |     P     | Backspace |
 * |-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------|
 * |    TAB    |     A     |     S     |     D     |     F     |     G     |     H     |     J     |     K     |     L     |     /     |     :     |
 * |-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------|
 * |   SHIFT   |     Z     |     X     |     C     |     V     |     B     |     N     |     M     |     ;     |     ,     |     .     |SHIFT/ENTER|
 * |-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------|
 * |   CTRL    |    WIN    |    DEL    |    ALT    |   LT2/?   |         SPACE         |   LT1/!   |   LEFT    |   DOWN    |    UP     |   RIGHT   |
 * `-----------+-----------+-----------+-----------+-----------+-----------------------+-----------+-----------+-----------+-----------+-----------'
 */
[_0] = LAYOUT_planck_mit(
    KC_GESC,  KC_Q,    KC_W,   KC_E,    KC_R,          KC_T,   KC_Y, KC_U,          KC_I,    KC_O,    KC_P,    KC_BSPC,
    KC_TAB,   KC_A,    KC_S,   KC_D,    KC_F,          KC_G,   KC_H, KC_J,          KC_K,    KC_L,    KC_SCLN, KC_QUOT,
    KC_LSFT,  KC_Z,    KC_X,   KC_C,    KC_V,          KC_B,   KC_N, KC_M,          UC(0x003B), UC(0x002C),  UC(0x002E), KC_SFTENT,
    RGB_LCTL, KC_LGUI, KC_DEL, KC_LALT, LT(2,KC_QUES), KC_SPC,       LT(1,KC_EXLM), KC_LEFT, KC_DOWN, KC_UP,   KC_RGHT
),

/* 1
 * ,-----------------------------------------------------------------------------------------------------------------------------------------------.
 * |    ESC    |     1     |     2     |     3     |     4     |     5     |     6     |     7     |     8     |     9     |     0     | Backspace |
 * |-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------|
 * |     ä     |     Ä     |     @     |     \     |     '     |     /     |     =     |     *     |     &     |     ^     |     {     |     }     |
 * |-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------|
 * |     ö     |     Ö     |     (     |     )     |     "     |     `     |     +     |     #     |     $     |     %     |     [     |     ]     |
 * |-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------|
 * |     ü     |     Ü     |           |           |           |         SPACE         |     _     |     -     |     |     |     <     |     >     |
 * `-----------+-----------+-----------+-----------+-----------+-----------------------+-----------+-----------+-----------+-----------+-----------'
 */
[_1] = LAYOUT_planck_mit(
    KC_ESC, KC_P1, KC_P2, KC_P3,   KC_P4, KC_P5,  KC_P6, KC_P7, KC_P8,    KC_P9,    KC_P0, KC_BSPC,
    UC(0x00E4),   UC(0x00C4),   UC(0x0040),  UC(0x005C),  UC(0x0027),  UC(0x002F), UC(0x003D), UC(0x002A), UC(0x0026),  UC(0x005E), UC(0x007B),  UC(0x007D),
    UC(0x00F6), UC(0x00D6), UC(0x0028),   UC(0x0029),   UC(0x0022),  UC(0x0060),  UC(0x002B),  UC(0x0023), UC(0x0024), UC(0x0025), UC(0x005B),  UC(0x005D),
    UC(0x00FC), UC(0x00DC), UC(0x005C), UC(0x002D), UC(0x005F), KC_SPC, UC(0x005F),    UC(0x002D),    UC(0x007C), UC(0x003C), UC(0x003E)
),

/* 2



 * ,-----------------------------------------------------------------------------------------------------------------------------------------------.
 * |    F1     |    F2     |    F3     |    F4     |    F5     |    F6     |    F7     |    F8     |    F9     |    F10    |    F11    |    F12    |
 * |-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------|
 * |    RGB    |  RGBMOD   |   HUE+    |   HUE-    |   SAT+    |   SAT-    |  BRGTH+   |  BRGTH-   |           |           |           |           |
 * |-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------|
 * |           |           |           |           |           |           |           |           |           |           |           |           |
 * |-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------|
 * |           |           |           |           |           |         SPACE         |           |           |           |           |           |
 * `-----------+-----------+-----------+-----------+-----------+-----------------------+-----------+-----------+-----------+-----------+-----------'
 */
[_2] = LAYOUT_planck_mit(
    KC_F1,  KC_F2,   KC_F3,   KC_F4,   KC_F5,   KC_F6,   KC_F7,   KC_F8,    KC_F9,    KC_F10, KC_F11, KC_F12,
    RGB_TOG, RGB_MOD, RGB_HUI, RGB_HUD, RGB_SAI, RGB_SAD,  RGB_VAI, RGB_VAD,    _______,    _______, _______, _______,
    _______,  _______,   _______,   _______,   _______,   _______,   _______,   _______,    _______,    _______, _______, _______,
    _______, _______, _______, _______, _______, KC_SPC, _______,    _______,    _______, _______, _______
),

};

layer_state_t layer_state_set_user(layer_state_t state) {
  return update_tri_layer_state(state, _0, _1, _2);
}












 
